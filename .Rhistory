mutate(duration = as.numeric(str_replace(duration, ' min', '')),
n_cast = str_count(cast, ','))
data_netflix_clean <- filter(data_netflix, type == 'Movie') %>%
select(-c(show_id, type, description, title, date_added, director)) %>%
mutate(duration = as.numeric(str_replace(duration, ' min', '')),
n_cast = str_count(cast, ',') + 1) %>% select(-cast)
data_netflix_clean
View(data_netflix_clean)
View(unique(data_netflix_clean$country))
unique(data_netflix_clean$country)
table(unique(data_netflix_clean$country))
View(table(unique(data_netflix_clean$country)))
str_detect('teste', 'tes')
data_netflix_clean <- filter(data_netflix, type == 'Movie') %>%
select(-c(show_id, type, description, title, date_added, director)) %>%
mutate(duration = as.numeric(str_replace(duration, ' min', '')),
n_cast = str_count(cast, ',') + 1,
n_country = str_count(country, ',') + 1,
is_in_usa = str_detect(country, 'United States')
) %>% select(-c(cast, country))
head(data_netflix_clean)
View(data_netflix_clean)
data_netflix_clean <- filter(data_netflix, type == 'Movie', rating > 0) %>%
select(-c(show_id, type, description, title, date_added, director)) %>%
mutate(duration = as.numeric(str_replace(duration, ' min', '')),
n_cast = str_count(cast, ',') + 1,
n_country = str_count(country, ',') + 1,
n_listed_in = str_count(listed_in, ',') + 1,
is_in_usa = str_detect(country, 'United States')
) %>% select(-c(cast, country, listed_in))
data_netflix_clean
data_netflix_clean %>%
ggplot(aes(release_year, rating)) + geom_point()
data_netflix_clean %>%
ggplot(aes(release_year, rating), color=is_in_usa) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
data_netflix_clean %>%
ggplot(aes(release_year, rating), group=is_in_usa) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
data_netflix_clean %>%
ggplot(aes(release_year, rating, group=is_in_usa)) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
data_netflix_clean$is_in_usa
data_netflix_clean %>%
ggplot(aes(release_year, rating, color=is_in_usa)) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
library(gridExtra)
names(data_netflix_clean)
p1 <- data_netflix_clean %>%
ggplot(aes(release_year, rating) ) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
p2 <- data_netflix_clean %>%
ggplot(aes(duration, rating) ) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
p3 <- data_netflix_clean %>%
ggplot(aes(n_cast, rating) ) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
p4 <- data_netflix_clean %>%
ggplot(aes(n_country, rating) ) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
grid.arrange(p1,p2,p3,p4, ncol=2)
p1 <- data_netflix_clean %>%
ggplot(aes(release_year, rating) ) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
p2 <- data_netflix_clean %>%
ggplot(aes(duration, rating) ) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
p3 <- data_netflix_clean %>%
ggplot(aes(n_cast, rating) ) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
p4 <- data_netflix_clean %>%
ggplot(aes(n_country, rating) ) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
grid.arrange(p1,p2,p3,p4, ncol=2)
grid.arrange(p1,p2,p3,p4, ncol=2)
p1 <- data_netflix_clean %>%
ggplot(aes(release_year, rating) ) + geom_point() +
ggtitle('Notas de acordo com o ano de lançamento')
p2 <- data_netflix_clean %>%
ggplot(aes(duration, rating) ) + geom_point() +
ggtitle('Notas de acordo com a duração')
grid.arrange(p1,p2, ncol=2)
data_netflix_clean %>%
ggplot(aes(is_in_usa, rating) ) + geom_histogram() +
ggtitle('Notas de acordo com o ano de lançamento')
data_netflix_clean %>%
ggplot(aes(is_in_usa, rating)) + geom_boxplot() +
ggtitle('Notas de acordo com o ano de lançamento')
p5 <- data_netflix_clean %>%
ggplot(aes(n_listed_in, rating) ) + geom_point() +
ggtitle('Notas de acordo com o número de categorias')
grid.arrange(p3,p4, p5, ncol=3)
p3 <- data_netflix_clean %>%
ggplot(aes(n_cast, rating) ) + geom_point() +
ggtitle('Notas de acordo com o tamanho do elenco')
p4 <- data_netflix_clean %>%
ggplot(aes(n_country, rating) ) + geom_point() +
ggtitle('Notas de acordo com o número de países')
p5 <- data_netflix_clean %>%
ggplot(aes(n_listed_in, rating) ) + geom_point() +
ggtitle('Notas de acordo com o número de categorias')
grid.arrange(p3,p4, p5, ncol=3)
p1 <- data_netflix_clean %>%
ggplot(aes(release_year, rating) ) + geom_point() +
ggtitle('Notas X ano de lançamento')
p2 <- data_netflix_clean %>%
ggplot(aes(duration, rating) ) + geom_point() +
ggtitle('Notas X duração do filme')
grid.arrange(p1,p2, ncol=2)
data_netflix_clean %>%
ggplot(aes(rating)) + geom_histogram(colod='white', fill='#008fac') +
ggtitle('Notas de para filmes disponíveis ou não nos EUA')
data_netflix_clean %>%
ggplot(aes(rating)) + geom_histogram(color='white', fill='#008fac') +
ggtitle('Distribuição das notas dos filmes')
data_netflix_clean %>%
ggplot(aes(rating)) + geom_histogram(color='white', fill='#008fac') +
ggtitle('Distribuição das notas dos filmes') + theme_minimal()
shapiro.test(data_netflix_clean$rating)
data_netflix_clean %>%
ggplot(aes(ln(rating))) + geom_histogram(color='white', fill='#008fac') +
ggtitle('Distribuição das notas dos filmes') + theme_minimal()
data_netflix_clean %>%
ggplot(aes(log(rating))) + geom_histogram(color='white', fill='#008fac') +
ggtitle('Distribuição das notas dos filmes') + theme_minimal()
data_netflix_clean %>%
ggplot(aes(rating)) + geom_histogram(color='white', fill='#008fac') +
ggtitle('Distribuição das notas dos filmes') + theme_minimal()
data_netflix_clean %>%
ggplot(aes(rating)) + geom_histogram(color='white', fill='#008fac', binwidth = 2) +
ggtitle('Distribuição das notas dos filmes') + theme_minimal()
data_netflix_clean %>%
ggplot(aes(rating)) + geom_histogram(color='white', fill='#008fac', binwidth = 3) +
ggtitle('Distribuição das notas dos filmes') + theme_minimal()
lm(rating ~ ., data=data_netflix_clean)
fit <- lm(rating ~ ., data=data_netflix_clean)
summary(fit)
p1 <- data_netflix_clean %>%
ggplot(aes(release_year, rating) ) + geom_point() +
ggtitle('Notas X ano de lançamento')
p2 <- data_netflix_clean %>%
ggplot(aes(duration, rating) ) + geom_point() +
ggtitle('Notas X duração do filme')
grid.arrange(p1,p2, ncol=2)
fit <- glm(rating ~ ., data=data_netflix_clean, family = gaussian(link='identity'))
summary(fit)
fit
fit <- glm(rating ~ ., data=data_netflix_clean, family = Gamma(link='identity'))
summary(fit)
fit <- lm(rating ~ ., data=data_netflix_clean)
summary(fit)
fit <- lm(rating ~ release_year + n_country, data=data_netflix_clean)
summary(fit)
fit <- lm(rating ~ release_year, data=data_netflix_clean)
summary(fit)
fit <- lm(rating ~ release_year + n_country + duration, data=data_netflix_clean)
summary(fit)
rstandard(fit)
plot(rstandard(fit))
plot(fit)
fit <- lm(rating ~ ., data=data_netflix_clean)
summary(fit)
data_netflix_clean2 <- select(data_netflix_clean, -c(n_listed_in, is_in_usa))
data_netflix_clean2 <- select(data_netflix_clean, -c(n_listed_in, is_in_usa))
fit2 <- lm(rating ~ ., data=data_netflix_clean2)
summary(fit2)
residuals(fit)
plot(residuals(fit))
plot(rstandar(fit))
plot(rstandard(fit))
plot(fit$fitted.values, rstandard(fit))
plot(fit$fitted.values, rstandard(fit), main='Valores preditos X Resíudos studentizados')
cooks.distance(fit)
plot(cooks.distance(fit))
plot(fit, which = 4)
plot(fit$fitted.values, rstandard(fit), main='Valores preditos X Resíudos studentizados')
plot(fit$fitted.values, rstandard(fit), main='Valores preditos X Resíudos studentizados')
abline(c(-3,3) lwd=2, col='red')
plot(fit$fitted.values, rstandard(fit), main='Valores preditos X Resíudos studentizados')
abline(c(-3,3), lwd=2, col='red')
plot(fit$fitted.values, rstandard(fit), main='Valores preditos X Resíudos studentizados')
abline(h=c(-3,3), lwd=2, col='red')
plot(fit$fitted.values, rstandard(fit), main='Valores preditos X Resíudos studentizados')
abline(h=c(-3,3), lwd=2, col='red', lty=2)
cooks.distance(fit)
plot(cooks.distance(fit))
plot(cooks.distance(fit))
plot(fit4$fitted.values, rstandard(fit4), main='Valores preditos X Resíudos studentizados')
abline(h=c(-3,3), lwd=2, col='red', lty=2)
plot(fit4$fitted.values, rstandard(fit4), main='Valores preditos X Resíudos studentizados')
abline(h=c(-3,3), lwd=2, col='red', lty=2)
plot(fit2$fitted.values, rstandard(fit2), main='Valores preditos X Resíudos studentizados')
abline(h=c(-3,3), lwd=2, col='red', lty=2)
plot(fit2, which = 4)
plot(fit2, which = 2)
par(mfrow=c(1,2))
plot(fit2, which = 2)
plot(fit2, which = 4)
plot(fit2$fitted.values, rstandard(fit2), main='Valores preditos X Resíudos studentizados')
abline(h=c(-3,3), lwd=2, col='red', lty=2)
par(mfrow=c(1,2))
plot(fit2, which = 2)
plot(fit2, which = 4)
data_netflix_clean3 <- slice(data_netflix_clean2, -c(2156,2562,3673))
data_netflix_clean3
kable(slice(data_netflix_clean2, c(2156,2562,3673)), align = 'c')
data_netflix_clean3 <- slice(data_netflix_clean2, -c(2156,2562,3673))
fit3 <- lm(rating ~ ., data=data_netflix_clean3)
summary(fit3)
data_netflix_clean3 <- slice(data_netflix_clean2, -c(2156,2562,3673))
fit3 <- lm(rating ~ ., data=data_netflix_clean3)
summary(fit3)
plot(fit3$fitted.values, rstandard(fit3), main='Valores preditos X Resíudos studentizados')
abline(h=c(-3,3), lwd=2, col='red', lty=2)
par(mfrow=c(1,2))
plot(fit3, which = 2)
plot(fit3, which = 4)
plot(fit2, which = 4)
cooks.distance(fit2)
which(cooks.distance(fit2) > 0.01)
data_netflix_clean3 <- slice(data_netflix_clean2, -which(cooks.distance(fit2) > 0.01))
fit3 <- lm(rating ~ ., data=data_netflix_clean3)
summary(fit3)
plot(fit3$fitted.values, rstandard(fit3), main='Valores preditos X Resíudos studentizados')
abline(h=c(-3,3), lwd=2, col='red', lty=2)
par(mfrow=c(1,2))
plot(fit3, which = 2)
plot(fit3, which = 4)
summary(fit3)
par(mfrow=c(1,2))
plot(fit3$fitted.values, rstandard(fit3), main='Valores preditos X Resíudos studentizados')
abline(h=c(-3,3), lwd=2, col='red', lty=2)
plot(fit2, which = 2)
summary(data_netflix_clean3$rating)
data_netflix_clean4 <- mutate(data_netflix_clean3, is_good = rating >= 73)
library(corrplot)
corrplot(cor(data_netflix_clean3))
prcomp(data_netflix_clean3)
summary(prcomp(data_netflix_clean3))
corrplot(cor(data_netflix_clean3))
data_netflix_clean4
library(caret)
library(rpart)
rpart( is_good ~ ., data = data_netflix_clean4)
fit_rpart <- rpart( is_good ~ ., data = data_netflix_clean4)
plot(fit_rpart)
prp(fit_rpart)
library(rpart)
library(rpart.plot)
prp(fit_rpart)
data_netflix_clean4 <- mutate(data_netflix_clean3, is_good = rating >= 73) %>%
select(-rating)
fit_rpart <- rpart( is_good ~ ., data = data_netflix_clean4)
prp(fit_rpart)
rpart.plot(fit_rpart)
data_netflix_clean4 <- mutate(data_netflix_clean3, is_good = as.factor(rating >= 73)) %>%
select(-rating)
fit_rpart <- rpart( is_good ~ ., data = data_netflix_clean4)
rpart.plot(fit_rpart)
data_netflix_clean4 <- mutate(data_netflix_clean3, is_good = rating >= 73) %>%
select(-rating)
fit_rpart <- rpart( is_good ~ ., data = data_netflix_clean4)
rpart.plot(fit_rpart)
prp(fit_rpart)
fit_rpart <- rpart( as.factor(is_good) ~ ., data = data_netflix_clean4)
rpart.plot(fit_rpart)
fit_rpart
data_netflix_clean4$is_good
as.factor(data_netflix_clean4$is_good)
fit <- train(as.factor(is_good) ~ ., data=data_netflix_clean4, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
plot(fit)
rpart.plot(fit)
prp(fit)
fit <- train(as.factor(is_good) ~ ., data=data_netflix_clean4, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
rpart.plot(fit$finalModel)
fit <- train(as.factor(is_good) ~ ., data=data_netflix_clean4, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 5)
plot(fit)
rpart.plot(fit$finalModel)
fit <- train(as.factor(is_good) ~ ., data=data_netflix_clean4, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 7)
plot(fit)
rpart.plot(fit$finalModel)
index <- createDataPartition(data_netflix_clean4$is_good, p = 0.7, list = FALSE)
index
treino <- data_netflix_clean4[index,]
teste <- data_netflix_clean4[-index,]
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
rpart.plot(fit$finalModel)
plot(fit)
rpart.plot(fit$finalModel)
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 9)
plot(fit)
rpart.plot(fit$finalModel)
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 5)
plot(fit)
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
plot(fit)
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
plot(fit)
set.seed(555)
index <- createDataPartition(data_netflix_clean4$is_good, p = 0.7, list = FALSE)
treino <- data_netflix_clean4[index,]
teste <- data_netflix_clean4[-index,]
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
plot(fit)
rpart.plot(fit$finalModel)
set.seed(555)
index <- createDataPartition(data_netflix_clean4$is_good, p = 0.7, list = FALSE)
treino <- data_netflix_clean4[index,]
teste <- data_netflix_clean4[-index,]
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 5),
tuneLength = 10)
plot(fit)
rpart.plot(fit$finalModel)
set.seed(12345)
index <- createDataPartition(data_netflix_clean4$is_good, p = 0.7, list = FALSE)
treino <- data_netflix_clean4[index,]
teste <- data_netflix_clean4[-index,]
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
plot(fit)
rpart.plot(fit$finalModel)
set.seed(777)
index <- createDataPartition(data_netflix_clean4$is_good, p = 0.7, list = FALSE)
treino <- data_netflix_clean4[index,]
teste <- data_netflix_clean4[-index,]
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
plot(fit)
rpart.plot(fit$finalModel)
set.seed(00100100)
index <- createDataPartition(data_netflix_clean4$is_good, p = 0.7, list = FALSE)
treino <- data_netflix_clean4[index,]
teste <- data_netflix_clean4[-index,]
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
plot(fit)
rpart.plot(fit$finalModel)
set.seed(11111)
index <- createDataPartition(data_netflix_clean4$is_good, p = 0.7, list = FALSE)
treino <- data_netflix_clean4[index,]
teste <- data_netflix_clean4[-index,]
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
plot(fit)
rpart.plot(fit$finalModel)
set.seed(55555)
index <- createDataPartition(data_netflix_clean4$is_good, p = 0.7, list = FALSE)
treino <- data_netflix_clean4[index,]
teste <- data_netflix_clean4[-index,]
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
plot(fit)
rpart.plot(fit$finalModel)
set.seed(123)
index <- createDataPartition(data_netflix_clean4$is_good, p = 0.7, list = FALSE)
treino <- data_netflix_clean4[index,]
teste <- data_netflix_clean4[-index,]
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
plot(fit)
rpart.plot(fit$finalModel)
prp(fit$finalModel)
aux <- predict(fit, teste, type = "prob")
plot(rocit(score = aux[,2], class =teste$result))
library(ROCit)
aux <- predict(fit, teste, type = "prob")
plot(rocit(score = aux[,2], class =teste$result))
fit
teste <- data_netflix_clean4[-index,]
aux <- predict(fit, teste, type = "prob")
plot(rocit(score = aux[,2], class =teste$result))
aux <- predict(fit, teste, type = "prob")
plot(rocit(score = aux[,2], class = teste$is_good))
rocit(score = aux[,2], class = teste$is_good)
set.seed(123)
index <- createDataPartition(data_netflix_clean4$is_good, p = 0.7, list = FALSE)
treino <- data_netflix_clean4[index,]
teste <- data_netflix_clean4[-index,]
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
preProcess = c("center", "scale"),
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
plot(fit)
prp(fit$finalModel)
aux <- predict(fit, teste, type = "prob")
plot(rocit(score = aux[,2], class = teste$is_good))
rocit(score = aux[,2], class = teste$is_good)
aux[,2]
aux
confusionMatrix(aux[,2] >= 0.5, teste$is_good)
aux[,2] >= 0.5
confusionMatrix(as.factor(aux[,2] >= 0.5), teste$is_good)
confusionMatrix(factor(aux[,2] >= 0.5), teste$is_good)
teste$is_good
class(teste$is_good)
class(aux[,2] >= 0.5)
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good))
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good))
set.seed(123)
fit <- train(as.factor(is_good) ~ ., data=treino, method = "knn",
preProcess = c("center", "scale"),
trControl=trainControl(method = "cv", number = 10),
tuneLength = 20)
plot(fit)
aux <- predict(fit, teste, type = "prob")
plot(rocit(score = aux[,2], class = teste$is_good))
## curva ROC
rocit(score = aux[,2], class = teste$is_good)
## matriz de confusão
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good))
plot(fit)
prp(fit$finalModel)
set.seed(123)
index <- createDataPartition(data_netflix_clean4$is_good, p = 0.7, list = FALSE)
treino <- data_netflix_clean4[index,]
teste <- data_netflix_clean4[-index,]
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
preProcess = c("center", "scale"),
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
prp(fit$finalModel)
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good))
rocit(score = aux[,2], class = teste$is_good)
teste <- rocit(score = aux[,2], class = teste$is_good)
teste$AUC
rocit(score = aux[,2], class = teste$is_good)$AUC
## curva ROC
roc <- rocit(score = aux[,2], class = teste$is_good)
aux <- predict(fit, teste, type = "prob")
set.seed(123)
index <- createDataPartition(data_netflix_clean4$is_good, p = 0.7, list = FALSE)
treino <- data_netflix_clean4[index,]
teste <- data_netflix_clean4[-index,]
fit <- train(as.factor(is_good) ~ ., data=treino, method = "rpart",
trControl=trainControl(method = "cv", number = 10),
tuneLength = 10)
aux <- predict(fit, teste, type = "prob")
## curva ROC
roc <- rocit(score = aux[,2], class = teste$is_good)
roc$AUC
round(roc$AUC)
round(roc$AUC, 2)
round(roc$AUC, 3)
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good))
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good), positive = T)
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good), positive = 'T')
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good), reference = T)
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good), reference = 'T')
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good), positive = 'T')
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good), positive = factor('T'))
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good), positive = 'T')
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good))
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good), positive='T')
confusionMatrix(as.character(aux[,2] >= 0.5), as.character(teste$is_good), positive='T')
confusionMatrix(as.character(aux[,2] >= 0.5), as.character(teste$is_good))
confusionMatrix(as.factor(aux[,2] >= 0.5), as.factor(teste$is_good), positive=T)
confusionMatrix(as.factor(aux[,2] >= 0.5), as.factor(teste$is_good), positive='T')
confusionMatrix(as.factor(aux[,2] >= 0.5), as.factor(teste$is_good))
confusionMatrix(as.factor(aux[,2] >= 0.5), as.factor(teste$is_good), positive='TRUE')
set.seed(123)
fit <- train(as.factor(is_good) ~ ., data=treino, method = "knn",
preProcess = c("center", "scale"),
trControl=trainControl(method = "cv", number = 10),
tuneLength = 20)
aux <- predict(fit, teste, type = "prob")
## curva ROC
roc <- rocit(score = aux[,2], class = teste$is_good)
plot(roc)
plot(roc)
set.seed(123)
fit <- train(as.factor(is_good) ~ ., data=treino, method = "knn",
preProcess = c("center", "scale"),
trControl=trainControl(method = "cv", number = 10),
tuneLength = 20)
aux <- predict(fit, teste, type = "prob")
## curva ROC
roc <- rocit(score = aux[,2], class = teste$is_good)
plot(roc)
## matriz de confusão
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good))
confusionMatrix(factor(aux[,2] >= 0.5), factor(teste$is_good), positive='TRUE')
roc$AUC
